name: Build & push docker images
description: Builds and push docker images for the input platform, tags and image version
inputs:
  docker-config-file:
    required: false
    description: Path to the docker config file (defaults to .docker-config.json) Must contain imageName, may contain dockerfile.
    default: .docker-config.json
  dockerhub-user:
    required: true
    description: username for dockerhub
  dockerhub-password:
    required: true
    description: password for dockerhub
  github-token:
    required: true
    description: Usually secrets.GITHUB_TOKEN
  artifactory-username:
    required: true
    description: Artifactory user name usually secrets.ARTIFACTORY_USERNAME
  artifactory-auth-token:
    required: true
    description: Artifactory auth token usually secrets.ARTIFACTORY_AUTH_TOKEN
  image-version:
    required: true
    description: Docker image version
  image-platform:
    description: Target platform to build image for (eg. linux/amd64 (default), linux/arm64, etc)
    required: false
    default: linux/amd64
  docker-metadata-tags:
    description: "'List of tags as key-value pair attributes' See: https://github.com/docker/metadata-action#tags-input"
    required: false
outputs:
  image-name:
    description: Docker image name
    value: ${{ steps.config.outputs.image-name }}
  image-with-tag:
    description: Full image with tag - <image-name>:<image-version>
    value: ${{ steps.config.outputs.image-name }}:${{ inputs.image-version }}

runs:
  using: composite
  steps:
    - name: Dump GitHub context
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - id: config
      shell: bash
      run: |
        # if docker-config file does not exist - fail
        if [ ! -f "${{ inputs.docker-config-file }}" ]; then
          echo "::error::Docker config file not found: ${{ inputs.docker-config-file }}" && exit 1
        fi
        image_name=$(jq -r .imageName ${{ inputs.docker-config-file }})
        echo "image-name: ${image_name}"
        echo "image-name=${image_name}" >> $GITHUB_OUTPUT
        dockerfile=$(jq -r '.dockerfile // "./Dockerfile"' ${{ inputs.docker-config-file }})
        echo "Dockerfile: ${dockerfile}"
        echo "dockerfile=${dockerfile}" >> $GITHUB_OUTPUT
        echo "image-version: ${{ inputs.image-version }}"
        echo "image-platform: ${{ inputs.image-platform }}"
        echo "docker-metadata-tags: ${{ inputs.docker-metadata-tags }}"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub-user }}
        password: ${{ inputs.dockerhub-password }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.config.outputs.image-name }}
        flavor: |
          latest=false
        tags: |
          ${{ inputs.image-tags }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: ${{ inputs.image-platform }}
        file: ${{ steps.config.outputs.dockerfile }}
        build-args: |
          GIT_COMMIT=${{ github.sha }}
          GITHUB_TOKEN=${{ inputs.github-token }}
          ARTIFACTORY_USERNAME=${{ inputs.artifactory-username }}
          ARTIFACTORY_AUTH_TOKEN=${{ inputs.artifactory-auth-token }}
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ inputs.image-version }}
          REVISION=${{ inputs.image-version }}
          BRANCH=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.branch'] }}
        push: true
        tags: ${{ steps.config.outputs.image-name }}:${{ inputs.image-version }}
        labels: ${{ steps.meta.outputs.labels }}
